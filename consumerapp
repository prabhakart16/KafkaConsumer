namespace KafkaConsumerApp
{
    public interface IMessageProcessor
    {
        Task ProcessMessageAsync(string message, AppDbContext dbContext);
    }

    public class BidProcessor : IMessageProcessor
    {
        public async Task ProcessMessageAsync(string message, AppDbContext dbContext)
        {
            var bid = System.Text.Json.JsonSerializer.Deserialize<Bid>(message);
            if (bid != null)
            {
                dbContext.Bids.Add(bid);
                await dbContext.SaveChangesAsync();
                Console.WriteLine("Bid saved to database.");
            }
        }
    }

    public class TradeProcessor : IMessageProcessor
    {
        public async Task ProcessMessageAsync(string message, AppDbContext dbContext)
        {
            var trade = System.Text.Json.JsonSerializer.Deserialize<Trade>(message);
            if (trade != null)
            {
                dbContext.Trades.Add(trade);
                await dbContext.SaveChangesAsync();
                Console.WriteLine("Trade saved to database.");
            }
        }
    }

    public class PurchaseAdviceProcessor : IMessageProcessor
    {
        public async Task ProcessMessageAsync(string message, AppDbContext dbContext)
        {
            var advice = System.Text.Json.JsonSerializer.Deserialize<PurchaseAdvice>(message);
            if (advice != null)
            {
                dbContext.PurchaseAdvices.Add(advice);
                await dbContext.SaveChangesAsync();
                Console.WriteLine("Purchase Advice saved to database.");
            }
        }
    }

    public class MessageProcessorFactory
    {
        public IMessageProcessor? GetProcessor(string topic)
        {
            return topic switch
            {
                "Bid" => new BidProcessor(),
                "Trade" => new TradeProcessor(),
                "PurchaseAdvice" => new PurchaseAdviceProcessor(),
                _ => null,
            };
        }
    }
}
